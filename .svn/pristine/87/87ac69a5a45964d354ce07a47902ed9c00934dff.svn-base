import {SIMULATOR_CONNECTION_STATE, updateSimulatorInfo} from "../state_modules/simulatorInfoState";
import {useTranslation} from "react-i18next";
import {useEffect, useState} from "react";
import {useDispatch} from "react-redux";

const SimulatorSettingComp = ({simulator, handleClose}) => {
    const dispatch = useDispatch();
    const [info, setInfo] = useState({
        simulatorName: '',
        connectionInfo: {
            ipAddress: '',
            port: '',
            loginId: '',
            loginPw: '',
            comment: ''
        }
    });

    useEffect(() => {
        setInfo({
            simulatorName: simulator.simulatorName,
            connectionInfo: simulator.connectionInfo
        })
    }, []);

    const onUpdateSimulatorInfo = simulationInfo => dispatch(updateSimulatorInfo(simulationInfo));

    const onChangeInputHandler = (key, value) => {
        if(key === "simulatorName") {
            setInfo({
                ...info,
                [key]: value
            })
        } else {
            setInfo({
                ...info,
                connectionInfo: {
                    ...info.connectionInfo,
                    [key]: value
                }
            });
        }
    };

    const onConfirmUpdate = () => {
        let state = SIMULATOR_CONNECTION_STATE.noInfo;

        if(info.ipAddress === "" || info.port === "" || info.simulatorName === "") {
            state = SIMULATOR_CONNECTION_STATE.disconnected;
        }

        const data = {
            ...info,
            id: simulator.id,
            state: state,
            connectionInfo: {
                ...info.connectionInfo
            }
        }
        onUpdateSimulatorInfo(data);
        handleClose();
    }

    const [t, i18n] = useTranslation('common');

    return (
        <div className="contents_box">
            <div className="table_input_wrap">
                <div className="table_input_title">
                    <h4>{t("config.enterInfo")}</h4>
                </div>
                <div className="table_input_contents">
                    <div className="table_input">
                        <div className="table_input_th">{t("config.modelName")}</div>
                        <div className="table_input_td">
                            <input type="text" className="form-control" placeholder={t("config.enterModelName")} title={t("config.enterModelName")} defaultValue={info.simulatorName}
                                   onChange={(e) => {
                                       onChangeInputHandler("simulatorName", e.target.value);
                                   }}
                            />
                        </div>
                    </div>
                    <div className="table_input">
                        <div className="table_input_th">IP Address</div>
                        <div className="table_input_td">
                            <input type="text" className="form-control" placeholder={t("config.enterIP")}
                                   title={t("config.enterIP")} defaultValue={info.connectionInfo.ipAddress}
                                   onChange={(e) => {
                                       onChangeInputHandler("ipAddress", e.target.value);
                                   }}
                            />
                        </div>
                    </div>
                    <div className="table_input">
                        <div className="table_input_th">Port</div>
                        <div className="table_input_td">
                            <input type="text" className="form-control" placeholder={t("config.enterPort")} title={t("config.enterPort")} defaultValue={info.connectionInfo.port}
                                   onChange={(e) => {
                                       onChangeInputHandler("port", e.target.value);
                                   }}
                            />
                        </div>
                    </div>
                    <div className="table_input">
                        <div className="table_input_th">Login ID</div>
                        <div className="table_input_td">
                            <input type="text" className="form-control" placeholder={t("config.enterID")}
                                   title={t("config.enterID")} defaultValue={info.connectionInfo.loginId}
                                   onChange={(e) => {
                                       onChangeInputHandler("loginId", e.target.value);
                                   }}
                            />
                        </div>
                    </div>
                    <div className="table_input">
                        <div className="table_input_th">Login PW</div>
                        <div className="table_input_td">
                            <input type="text" className="form-control" placeholder={t("config.enterPW")}
                                   title={t("config.enterPW")} defaultValue={info.connectionInfo.loginPw}
                                   onChange={(e) => {
                                       onChangeInputHandler("loginPw", e.target.value);
                                   }}
                            />
                        </div>
                    </div>
                    <div className="table_input">
                        <div className="table_input_th">{t("setting.comment")}</div>
                        <div className="table_input_td">
                                    <textarea className="form-control" rows="5" placeholder={t("config.enterComment")}
                                              title={t("config.enterComment")} defaultValue={info.connectionInfo.comment}
                                              onChange={(e) => {
                                                  onChangeInputHandler("comment", e.target.value);
                                              }}
                                    ></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div className="contents_btn">
                <button type="button" className="btn btn_black" title={t("config.connectionTest")}>{t("config.connectionTest")}</button>
                <button type="button" className="btn btn_blue ml_auto" title={t("config.confirm")}
                        onClick={() => {
                            onConfirmUpdate();
                        }}
                >{t("config.confirm")}</button>
                <button type="button" className="btn btn_grey ml_4" title={t("config.cancel")} onClick={() => {
                    handleClose();
                }}>{t("config.cancel")}</button>
            </div>
        </div>
    )
}

export default SimulatorSettingComp;