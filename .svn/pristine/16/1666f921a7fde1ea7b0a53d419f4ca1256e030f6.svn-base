import {createAction, handleActions} from 'redux-actions';

const ADD_SIMULATOR = 'simulatorInfoState/ADD_SIMULATOR';
const UPDATE_SIMULATOR_INFO = 'simulatorInfoState/UPDATE_SIMULATOR_INFO';
const UPDATE_SIMULATOR_VOLTAGE = 'simulatorInfoState/UPDATE_SIMULATOR_VOLTAGE';
const UPDATE_SIMULATOR_CURRENT = 'simulatorInfoState/UPDATE_SIMULATOR_CURRENT';
const UPDATE_SIMULATOR_PWM = 'simulatorInfoState/UPDATE_SIMULATOR_PWM';
const DELETE_SIMULATOR = 'simulatorInfoState/DELETE_SIMULATOR';
const GET_TEST_START_TOGGLE = 'simulatorInfoState/GET_TEST_START_TOGGLE';
const READ_DATA_START_TOGGLE = 'simulatorInfoState/READ_DATA_START_TOGGLE';
const MOVE_TO_NEXT_SEQUENCE = 'simulatorInfoState/MOVE_TO_NEXT_SEQUENCE';
const UPDATE_CHARGER_INFO = 'simulatorInfoState/UPDATE_CHARGER_INFO';

export const addSimulator = createAction(ADD_SIMULATOR);
export const updateSimulatorInfo = createAction(UPDATE_SIMULATOR_INFO);
export const updateSimulatorVoltage = createAction(UPDATE_SIMULATOR_VOLTAGE);
export const updateSimulatorCurrent = createAction(UPDATE_SIMULATOR_CURRENT);
export const updateSimulatorPwm = createAction(UPDATE_SIMULATOR_PWM);
export const deleteSimulator = createAction(DELETE_SIMULATOR);
export const getTestStartToggle = createAction(GET_TEST_START_TOGGLE);
export const readDataStartToggle = createAction(READ_DATA_START_TOGGLE);
export const moveToNextSequence = createAction(MOVE_TO_NEXT_SEQUENCE);
export const updateChargerInfo = createAction(UPDATE_CHARGER_INFO);

export const SIMULATOR_CONNECTION_STATE = {
    noInfo: -1,
    disconnected: 0,
    connected: 1,
    fail: 2,
    success: 3,
    inProgress: 4,
}

export const SIMULATOR_TEST = {
    standby: '0',
    normalOperation_low: '100',
    normalOperation_normal: '110',
    normalOperation_high: '140',
    groundFault_low: '200',
    groundFault_normal: '210',
    groundFault_high: '220',
    blockProtectionConductor_low: '300',
    blockProtectionConductor_normal: '320',
    blockProtectionConductor_high: '340',
    shortControlCircuit_low: '400',
    shortControlCircuit_normal: '420',
    shortControlCircuit_high: '440',
    diodeFault_low: '500',
    diodeFault_normal: '520',
    diodeFault_high: '540',
    ccid_low: '600',
    ccid_normal: '620',
    ccid_high: '640',
    done: '9999'
}

export const RESISTANCE_POINT = {
    low: 'low',
    normal: 'normal',
    high: 'high'
}

export const RESULTS = {
    fail: -1,
    standBy: 0,
    processing: 1,
    success: 2,
    noUse: 3
}

Object.freeze(SIMULATOR_CONNECTION_STATE);
Object.freeze(SIMULATOR_TEST);
Object.freeze(RESISTANCE_POINT);
Object.freeze(RESULTS);

const initialSimulatorState = {
    simulators: [
        {
            id: 0,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 1',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
               status: 0,
               ipAddress: '',
               port: '',
               loginId: '',
               loginPw: '',
               comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '99',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 0,
            chargeTime: 0,
            failSequence: ''
        },
        {
            id: 1,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 2',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
                status: 0,
                ipAddress: '',
                port: '',
                loginId: '',
                loginPw: '',
                comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '99',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 0,
            chargeTime: 0,
            failSequence: ''
        },
        {
            id: 2,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 3',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
                status: 0,
                ipAddress: '',
                port: '',
                loginId: '',
                loginPw: '',
                comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '99',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 8,
            chargeTime: 0,
            failSequence: ''
        },
        {
            id: 3,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 4',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
                status: 0,
                ipAddress: '',
                port: '',
                loginId: '',
                loginPw: '',
                comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '99',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 8,
            chargeTime: 0,
            failSequence: ''
        },
        {
            id: 4,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 5',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
                status: 0,
                ipAddress: '',
                port: '',
                loginId: '',
                loginPw: '',
                comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '5-2',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 8,
            chargeTime: 0,
            failSequence: ''
        },
        {
            id: 5,
            chargerId: -1,
            chargerTestMode: 0,
            simulatorName: 'Simulator 6',
            state: SIMULATOR_CONNECTION_STATE.disconnected,
            test: SIMULATOR_TEST.standby,
            resistancePoint: RESISTANCE_POINT.low,
            connectionInfo: {
                status: 0,
                ipAddress: '',
                port: '',
                loginId: '',
                loginPw: '',
                comment: ''
            },
            testResults: [
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,
                RESULTS.standBy,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse,

                RESULTS.noUse,
                RESULTS.standBy,
                RESULTS.noUse
            ],
            currTestSeq: 0,
            sequence: 0,
            failPoint: '12-1',
            gettingData: false,
            voltage: 0,
            current: 0,
            pwm: 0,
            permanentResistanceValue: 8,
            chargeTime: 0,
            failSequence: ''
        },
    ]
};

const simulatorInfoState = handleActions(
    {
        [addSimulator]: (state, action) => {
            state.simulators.push(action.payload);
            return {
                ...state,
               /*simulators: state.simulators.push(action.payload)*/
            };
        },
        [updateSimulatorVoltage]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {...simulator,
                            voltage: typeof action.payload.voltage === "undefined" ? 0 : action.payload.voltage,
                        } : simulator
                )
            }
        },
        [updateSimulatorCurrent]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {...simulator,
                            current:  typeof action.payload.current === "undefined" ? 0 : action.payload.current,
                        } : simulator
                )
            }
        },
        [updateSimulatorPwm]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {...simulator,
                            pwm: typeof action.payload.pwm === "undefined" ? 0 : action.payload.pwm
                        } : simulator
                )
            }
        },
        [updateSimulatorInfo]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {
                            ...simulator,
                            simulatorName: action.payload.simulatorName,
                            state: action.payload.state,
                            connectionInfo:  action.payload.connectionInfo,
                        } : simulator
                )
            }
        },
        [getTestStartToggle]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        action.payload.start ?
                            {...simulator, state: SIMULATOR_CONNECTION_STATE.inProgress} : {...simulator, state: SIMULATOR_CONNECTION_STATE.connected}
                        : simulator
                )
            }
        },
        [readDataStartToggle]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {...simulator, gettingData: action.payload.gettingData} : simulator
                )
            }
        },
        [moveToNextSequence]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {
                            ...simulator,
                            test: action.payload.test,
                            testResults: action.payload.testResults,
                            sequence: action.payload.sequence,
                            currTestSeq: action.payload.currTestSeq
                        } : simulator
                )
            }
        },
        [updateChargerInfo]: (state, action) => {
            return {
                ...state,
                simulators: state.simulators.map(simulator =>
                    simulator.id === action.payload.id ?
                        {
                            ...simulator,
                            chargerId: action.payload.chargerId,
                            chargerTestMode: action.payload.chargerTestMode,
                            state: SIMULATOR_CONNECTION_STATE.connected
                        } : simulator
                )
            }
        }
    },
    initialSimulatorState
);

export default simulatorInfoState;