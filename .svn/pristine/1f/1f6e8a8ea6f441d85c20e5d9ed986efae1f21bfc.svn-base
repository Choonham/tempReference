import {SIMULATOR_CONNECTION_STATE} from "../state_modules/simulatorInfoState";
import {useTranslation} from "react-i18next";
import '../components/Modal';
import {useSelector} from "react-redux";
import {useState} from "react";

const DashboardPage = ({simulators}) => {
    const [t, i18n] = useTranslation('common');

    const chargers = useSelector(state => state.chargerInfoState.chargers);

    const getInfoForState = (simul) => {
        let charger = {
            id: 0,
            modelNo: "모델 없음",
            modelName: "모델 없음",
            serialNo: '9999-9999-9999',
        };

        chargers.map((e, i) => {
            if(e.id === simul.chargerId) {
                charger = e;
            }
        });

        switch (simul.state) {
            case SIMULATOR_CONNECTION_STATE.noInfo:
                return(
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_connection.png" alt="no connect"/>
                                    <p className="text_blue">{t('dashBoard.status.connected')}</p>
                            </div>
                            <h2>{`Simulator ${simul.id + 1}`}</h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_alert">{t('dashBoard.msg.noInfoMsg')}</div>
                        </div>
                    </div>
                )
            case SIMULATOR_CONNECTION_STATE.disconnected:
                return (
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_no_connection.png" alt="no connect"/>
                                    <p className="text_red">{t('dashBoard.status.disconnected')}</p>
                            </div>
                            <h2>{`Simulator ${simul.id + 1}`}</h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_alert text_red">{t('dashBoard.msg.noConnectMsg')}</div>
                        </div>
                    </div>
                )
            case SIMULATOR_CONNECTION_STATE.connected:
                return (
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_connection.png" alt="no connect"/>
                                    <p className="text_blue">{t('dashBoard.status.connected')}</p>
                            </div>
                            <h2>
                                {`Simulator ${simul.id + 1}`}
                                <p>{charger.modelNo}</p>
                            </h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_text">
                                <div className="dashboard_box_text_detail">
                                    <span>{t('dashBoard.msg.chargerModelName')}</span>{charger.modelName}</div>
                                <div className="dashboard_box_text_detail"><span>Test</span>-</div>
                                <div className="dashboard_box_text_detail">
                                    <p><span>Volt. </span>{simul.voltage === 0 ? '-' : simul.voltage + 'V'}</p>
                                    <p><span>Curr. </span>{simul.current === 0 ? '-' : simul.current + 'A'}</p>
                                    <p><span>PWM. </span>{simul.pwm === 0 ? '-' : simul.pwm + 'V'}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                )
            case SIMULATOR_CONNECTION_STATE.fail:
                return (
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_connection.png" alt="no connect"/>
                                    <p className="text_blue">Connect</p>
                            </div>
                            <h2>
                                {`Simulator ${simul.id + 1}`}
                                <p>{charger.modelNo}</p>
                            </h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_text">
                                <div className="dashboard_box_text_detail">
                                    <span>{t('dashBoard.msg.chargerModelName')} </span>{charger.modelName}</div>
                                <div className="dashboard_box_text_detail">
                                    <span>Test</span>{`${simul.test} - ${simul.sequence}`}</div>
                                <div className="dashboard_box_text_detail">
                                    <p><span>Volt. </span>{simul.voltage === 0 ? '-' : simul.voltage + 'V'}</p>
                                    <p><span>Curr. </span>{simul.current === 0 ? '-' : simul.current + 'A'}</p>
                                    <p><span>PWM. </span>{simul.pwm === 0 ? '-' : simul.pwm + 'V'}</p>
                                </div>
                            </div>
                            <div className="dashboard_box_footer">
                                <div className="test_status">
                                    <img src="style/img/sub/img_test_loader.gif" alt="test"/>
                                        <p className="text_yellow">test</p>
                                </div>
                                <div className="simulator_result">
                                    <span className="text_red">{t('simulator.fail')}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                )
            case SIMULATOR_CONNECTION_STATE.success:
                return (
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_connection.png" alt="test"/>
                                    <p className="text_blue">Connect</p>
                            </div>
                            <h2>
                                {`Simulator ${simul.id + 1}`}
                                <p>{charger.modelNo}</p>
                            </h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_text">
                                <div className="dashboard_box_text_detail">
                                    <span>{t('dashBoard.msg.chargerModelName')} </span>{charger.modelName}</div>
                                <div className="dashboard_box_text_detail">
                                    <span>Test </span>{`${simul.test} - ${simul.sequence}`}</div>
                                <div className="dashboard_box_text_detail">
                                    <p><span>Volt. </span>{simul.voltage === 0 ? '-' : simul.voltage + 'V'}</p>
                                    <p><span>Curr. </span>{simul.current === 0 ? '-' : simul.current + 'A'}</p>
                                    <p><span>PWM. </span>{simul.pwm === 0 ? '-' : simul.pwm + 'V'}</p>
                                </div>
                            </div>
                            <div className="dashboard_box_footer">
                                <div className="test_status">
                                    <img src="img/sub/img_finish.png" alt="finish"/>
                                        <p className="text_grey">Finish</p>
                                </div>
                                <div className="simulator_result">
                                    <span className="text_Success">Success</span>
                                </div>
                            </div>
                            <div className="dashboard_box_footer_btn">
                                <button type="button" className="btn btn_black" title="Result">Result</button>
                            </div>
                        </div>
                    </div>
                )
            case SIMULATOR_CONNECTION_STATE.inProgress:
                return (
                    <div className="dashboard_box">
                        <div className="dashboard_box_title">
                            <div className="simulator_status">
                                <img src="style/img/sub/img_connection.png" alt="test"/>
                                    <p className="text_blue">Connect</p>
                            </div>
                            <h2>
                                {`Simulator ${simul.id + 1}`}
                                <p>{charger.modelNo}</p>
                            </h2>
                        </div>
                        <div className="dashboard_box_con">
                            <div className="dashboard_box_text">
                                <div className="dashboard_box_text_detail">
                                    <span>{t('dashBoard.msg.chargerModelName')} </span>{charger.modelName}</div>
                                <div className="dashboard_box_text_detail">
                                    <span>Test </span>{`${simul.test} - ${simul.sequence}`}</div>
                                <div className="dashboard_box_text_detail">
                                    <p><span>Volt. </span>{simul.voltage === 0 ? '-' : simul.voltage + 'V'}</p>
                                    <p><span>Curr. </span>{simul.current === 0 ? '-' : simul.current + 'A'}</p>
                                    <p><span>PWM. </span>{simul.pwm === 0 ? '-' : simul.pwm + 'V'}</p>
                                </div>
                            </div>
                            <div className="dashboard_box_footer">
                                <div className="test_status">
                                    <img src="style/img/sub/img_test_loader.gif" alt="test"/>
                                        <p className="text_yellow">test</p>
                                </div>
                            </div>
                        </div>
                    </div>
                )
        }
    }

    return (
        <div className="contents_wrap scrollbar_custom">
            <div className="dashboard">
                {simulators.map((simulator) =>
                    <div className="dashboard_box_wrap" key = {simulator.id}>
                        { getInfoForState(simulator)}
                    </div>
                )}
            </div>
        </div>
    )

}

export default DashboardPage;