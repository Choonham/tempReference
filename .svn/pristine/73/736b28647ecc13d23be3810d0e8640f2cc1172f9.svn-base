import {createAction, handleActions} from "redux-actions";
import {RESULTS} from "./simulatorInfoState";
import {takeLatest, takeEvery} from 'redux-saga/effects';
import createRequestSaga, {createRequestAction, createRequestActionTypes} from "../saga/createRequestSaga";
import * as api from "../apis/api";

const [GET_TEST_RESULT_DETAIL, GET_TEST_RESULT_DETAIL_SUCCESS, GET_TEST_RESULT_DETAIL_FAILURE] = createRequestActionTypes('testResultState/GET_TEST_RESULT_DETAIL');
const [GET_TEST_RESULT, GET_TEST_RESULT_SUCCESS, GET_TEST_RESULT_FAILURE] = createRequestActionTypes('testResultState/GET_TEST_RESULT');
const [GET_TEST_RESULT_DETAIL_DATA, GET_TEST_RESULT_DETAIL_DATA_SUCCESS, GET_TEST_RESULT_DETAIL_DATA_FAILURE] = createRequestActionTypes('testResultState/GET_TEST_RESULT_DETAIL_DATA');
const [INSERT_PROCESS_RESULT, INSERT_PROCESS_RESULT_SUCCESS, INSERT_PROCESS_RESULT_FAILURE] = createRequestActionTypes('testResultState/INSERT_PROCESS_RESULT');

export const getTestResult = (simulatorID, deviceID, chargerID, serialNo, startDate, endDate, page, callbacks) => {
    return createRequestAction(GET_TEST_RESULT,{simulatorID, deviceID, chargerID, serialNo, startDate, endDate, page}, callbacks);
};

export const getTestResultDetail = (testID, callbacks) => {
    return createRequestAction(GET_TEST_RESULT_DETAIL, testID, callbacks);
};

export const getTestResultDetailData = (testID, sequenceID, callbacks) => {
    return createRequestAction(GET_TEST_RESULT_DETAIL_DATA, {testID, sequenceID}, callbacks);
};

export const insertProcessResult = (testID, eventID, processing, callbacks) => {
    return createRequestAction(INSERT_PROCESS_RESULT, {testID, eventID, processing}, callbacks);
};

const getTestResultSaga = createRequestSaga(GET_TEST_RESULT, api.getTestResult);
const getTestResultDetailSaga = createRequestSaga(GET_TEST_RESULT_DETAIL, api.getTestResultDetail);
const getTestResultDetailDateSaga = createRequestSaga(GET_TEST_RESULT_DETAIL_DATA, api.getTestResultDetailData);
const insertProcessResultSaga = createRequestSaga(INSERT_PROCESS_RESULT, api.insertProcessResult);

export function* testResultSaga() {
    yield takeEvery(GET_TEST_RESULT, getTestResultSaga);
    yield takeEvery(GET_TEST_RESULT_DETAIL, getTestResultDetailSaga);
    yield takeEvery(GET_TEST_RESULT_DETAIL_DATA, getTestResultDetailDateSaga);
    yield takeEvery(INSERT_PROCESS_RESULT, insertProcessResultSaga);
}

const initialState = {
    testResults: [
    ],
    resultDetail: {},
    detailData: {},
    totalCnt: 0,
};

const testResultState = handleActions(
    {
        [GET_TEST_RESULT_SUCCESS]: (state, {payload}) => {
            return {
                ...state,
                testResults: payload.list,
                totalCnt: payload.totalCount,
            };
        },
        [GET_TEST_RESULT_FAILURE]: (state, {payload}) => {
            console.log(payload);
            return {
                ...state,
            };
        },
        [GET_TEST_RESULT_DETAIL_SUCCESS]: (state, {payload}) => {
            return {
                ...state,
                resultDetail: payload.data,
            };
        },
        [GET_TEST_RESULT_DETAIL_FAILURE]: (state, {payload}) => {
            console.log(payload);
            return {
                ...state,
            };
        },
        [GET_TEST_RESULT_DETAIL_DATA_SUCCESS]: (state, {payload}) => {
            return {
                ...state,
                detailData: payload.data
            };
        },
        [INSERT_PROCESS_RESULT_SUCCESS]: (state, {payload, requestPayload}) => {
            return {
                ...state,
                resultDetail: {
                    ...state.resultDetail,
                    event: state.resultDetail.event.map((e) => (
                        e.eventID == requestPayload.eventID ? {
                            ...e,
                            processing: requestPayload.processing
                        } : {
                            ...e
                        }
                    )),
                }
            }
        }
    },
    initialState
);

export default testResultState;