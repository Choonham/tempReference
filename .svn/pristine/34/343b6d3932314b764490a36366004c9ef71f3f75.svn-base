import {useDispatch, useSelector} from "react-redux";
import {
    DONE_FLAG,
    getTestStartToggle, moveToNextSequence, readDataStartToggle, reconfigCharger,
    RESISTANCE_POINT,
    RESULTS, setSimulControl, setStandbyFromDone,
    SIMULATOR_CONNECTION_STATE, SIMULATOR_TEST, START, updateSimulatorCurrent, updateSimulatorVoltage
} from "../state_modules/simulatorInfoState";
import {useEffect, useState} from "react";
import RealtimeGraph from "../components/RealTimeGraph";
import './ControlPanelPage.scss';
import {useTranslation} from "react-i18next";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { library } from '@fortawesome/fontawesome-svg-core';
import Modal from "../components/Modal";
import {setTestReady} from "../state_modules/simulatorInfoState";
import ConfirmStopComp from "../components/ConfirmStopComp";
import TestResultComp from "../components/TestResultComp";
import AlertComp from "../components/AlertComp";
import {show_disconn_alert} from "../state_modules/alertState";
import Swal from "sweetalert2";
import {getAxiosConfigWithAuthHeaders} from "../apis/api";
import {API_REQUEST_URL} from "../apis/Common";

const ControlPanelPage = ({i}) => {

    library.add(fas);

    const simulator = (useSelector(state=>state.simulatorInfoState.simulators))[i];
    const disConnAlert  = useSelector(state => state.alertState.disconShow);

    const disConnFalse = () => {
        dispatch(show_disconn_alert(false));
    };

    useEffect(() => {
        if(disConnAlert) {
            Swal.fire({
                title: 'Error!',
                text: t('alert.disConnMsg'),
                icon: 'error',
                confirmButtonText: 'Okay',
                allowOutsideClick: false
            });

            disConnFalse();
        }
    }, [disConnAlert]);

    const [t, i18n] = useTranslation('common');

    const dispatch = useDispatch();
    const onUpdateSimulatorVoltage = info => dispatch(updateSimulatorVoltage(info));
    const onUpdateSimulatorCurrent = info => dispatch(updateSimulatorCurrent(info));

    const [chargingTime, setChargingTime] = useState();
    const [loadValue, setLoadValue] = useState();
    const [intervalTime, setIntervalTime] = useState();

    const chargers = useSelector(state => state.chargerInfoState.chargers);

    const [charger, setCharger] = useState({
        ChargerID: 0,
        ModelNo: {id: '', content: "모델 없음"},
        ModelName:  {id: '', content: "모델 없음"},
        SerialNo:  {id: '', content: "9999-9999-9999"},
    });

    useEffect(() => {
        setChargingTime(simulator.chargingTime);
        setLoadValue(simulator.loadSet);
        setIntervalTime(simulator.intervalTime);
    }, [simulator]);

   useEffect(() => {
       chargers.map((e, i) => {
           if(e.ChargerID === simulator.chargerId) {
               setCharger(e);
           }
       });
    }, [simulator, charger]);

    const [allRTestResult, setAllRTestResult] = useState([
        RESULTS.standBy,
        RESULTS.standBy,
        RESULTS.standBy,
        RESULTS.standBy,
        RESULTS.standBy,
        RESULTS.standBy
    ]);

    const [renderFlag, setRenderFlag] = useState(false);

    useEffect(()=>{
       setRenderFlag(true);
    }, []);

    useEffect(() => {
        if(renderFlag && simulator.test) {
            const tempResult = simulator.testResults;
            let seq = 0;
            const tempAll = allRTestResult;
            tempResult.forEach((e, i) => {
                seq = i !== 0 ? Math.floor(((i - 1) / 3)) : 0;
                if(parseInt(simulator.chargerTestMode) === 1) {
                    if(((i) === 2 || (i) === 5 ||(i) === 8 || (i) === 11)) {
                       if(simulator.testResults[i] === RESULTS.success) {
                           tempAll[seq] = RESULTS.success;
                       } else if(simulator.testResults[i] === RESULTS.fail) {
                           tempAll[seq] = RESULTS.fail;
                       } else {
                          tempAll[seq] = RESULTS.processing;
                       }
                   } else if(i === 14) {
                       if(simulator.testResults[i - 1] === RESULTS.success
                           && simulator.testResults[i] === RESULTS.success
                           && simulator.testResults[i + 1] === RESULTS.success) {
                           tempAll[seq] = RESULTS.success;
                       } else if(simulator.testResults[i] === RESULTS.fail) {
                           tempAll[seq] = RESULTS.fail;
                       } else {
                           tempAll[seq] = RESULTS.processing;
                       }
                   } else if(i === 17) {
                       if(simulator.testResults[i] === RESULTS.processing) {
                           tempAll[seq] = RESULTS.processing;
                       } else {
                           if(simulator.testResults[i] === RESULTS.success) {
                               tempAll[seq] = RESULTS.success;
                           } else if(simulator.testResults[i] === RESULTS.fail){
                               tempAll[seq] = RESULTS.fail;
                           }
                       }
                   }
                } else {
                    if(((i) === 3 || (i) === 6 ||(i) === 9 || (i) === 12)) {
                        if(simulator.testResults[i -2] === RESULTS.success
                            && simulator.testResults[i - 1] === RESULTS.success
                            && simulator.testResults[i] === RESULTS.success) {
                            tempAll[seq] = RESULTS.success;
                        } else if(simulator.testResults[i -2] === RESULTS.fail
                            || simulator.testResults[i - 1] === RESULTS.fail
                            || simulator.testResults[i] === RESULTS.fail) {
                            tempAll[seq] = RESULTS.fail;
                        } else {
                            tempAll[seq] = RESULTS.processing;
                        }
                    } else if(i === 14) {
                        if(simulator.testResults[i - 1] === RESULTS.success
                            && simulator.testResults[i] === RESULTS.success
                            && simulator.testResults[i + 1] === RESULTS.success) {
                            tempAll[seq] = RESULTS.success;
                        } else if(simulator.testResults[i] === RESULTS.fail) {
                            tempAll[seq] = RESULTS.fail;
                        } else {
                            tempAll[seq] = RESULTS.processing;
                        }
                    } else if(i === 17) {
                        if(simulator.testResults[i] === RESULTS.processing) {
                            tempAll[seq] = RESULTS.processing;
                        } else {
                            if(simulator.testResults[i] === RESULTS.success) {
                                tempAll[seq] = RESULTS.success;
                            } else if(simulator.testResults[i] === RESULTS.fail){
                                tempAll[seq] = RESULTS.fail;
                            }
                        }
                    }
                }
            });

            setAllRTestResult(tempAll);
        }
    }, [simulator.currTestSeq, simulator.sequence, renderFlag]);

    const [sequenceList, setSequenceList] = useState([]);

    const [isStart, setIsStart] = useState(false);
    const [effectToggle, setEffectToggle] = useState(false);

    useEffect(() => {
        if(effectToggle) {
            if(isStart) {
                testStart();
            }
            else {
                //testStop();
            }
        }
    }, [isStart]);

    const onStartButton = () => {
        if(isStart) {
            toggleStopConfirmOpen();
        } else {
            setEffectToggle(true);
            setIsStart(!isStart);
        }
    };

    const [stopConfirmOpen, setStopConfirmOpen] = useState(false);

    const toggleStopConfirmOpen = () => {
        setStopConfirmOpen(!stopConfirmOpen);
    };

    const handleDoneOK = () => {
        dispatch(reconfigCharger(simulator.id, 2));

        dispatch(setStandbyFromDone(
            simulator.id,
            START.withNewInfo,
            chargingTime,
            intervalTime,
            loadValue
        ));

        setAllRTestResult([
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy
        ]);
    };

    const handleDoneRestart = () => {
        dispatch(reconfigCharger(simulator.id, 1));

        dispatch(setStandbyFromDone(
            simulator.id,
            START.withPrevInfo,
            chargingTime,
            intervalTime,
            loadValue,
        ));

        setAllRTestResult([
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy
        ]);
    };

    const restartYes = () => {
        dispatch(reconfigCharger(simulator.id, START.withPrevInfo));
        dispatch(setSimulControl(
            simulator.id,
            "8",
            parseInt(simulator.chargerTestMode) === 1 ? "2" : "1",
            chargingTime,
            loadValue,
            intervalTime,
            simulator.testInfo.testID,
            0,
            0,
            DONE_FLAG.restartWithPrevInfo,
            localStorage.getItem('uuid')
        ));

        setAllRTestResult([
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy
        ]);
    };

    useEffect(() => {
        if(simulator.restart == 7) {
            dispatch(setTestReady(
                simulator.id,
                simulator.testInfo.deviceID,
                simulator.chargerId,
                simulator.testInfo.modelNo,
                simulator.testInfo.modelName,
                simulator.testInfo.serialNo,
                simulator.testInfo.technician,
                parseInt(simulator.chargerTestMode) === 1 ? 'N' : 'F',
                simulator.testInfo.note,
                localStorage.getItem('uuid')
            ));
            /*dispatch(reconfigCharger(simulator.id, 0));*/
        }
    }, [simulator.restart])

    const restartNo = () => {
        dispatch(reconfigCharger(simulator.id, 2));
        dispatch(setSimulControl(
            simulator.id,
            "8",
            parseInt(simulator.chargerTestMode) === 1 ? "2" : "1",
            chargingTime,
            loadValue,
            intervalTime,
            simulator.testInfo.testID,
            0,
            0,
            DONE_FLAG.restartWithNewInfo,
            localStorage.getItem('uuid')
        ));

        setAllRTestResult([
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy,
            RESULTS.standBy
        ]);
    };

    useEffect(() => {
        setSequenceList([
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.charging'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.chargingDone'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.disconnect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.groundFault'), len: 2, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.charging'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.blockProtectiveConductor'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.charging'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.shortCircuit'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.diodeFault'), len: 2, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
            [
                {name: t('simulator.testSequence.begin'), len: 1, stat: 0, index: 0},
                {name: t('simulator.testSequence.connect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.charging'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.CCID20'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.disconnect'), len: 1, stat: 0, index: 1},
                {name: t('simulator.testSequence.complete'), len: 1, stat: 0, index: 2}
            ],
        ]);
    }, [t, simulator])

    const [voltageMeter, setVoltageMeter] = useState(0);
    const [currentMeter, setCurrentMeter] = useState(0);

    const [maxMinValue, setMaxMinValue] = useState({
        maxVol: 0,
        minVol: 0,
        maxCur: 0,
        minCur: 0,
        isFirst: true
    });

    let stepOverSeqNum = 0;

    const formatDateTime = () => {
        const currentDateTime = new Date();

        const year = currentDateTime.getFullYear();
        const month = String(currentDateTime.getMonth() + 1).padStart(2, '0');
        const day = String(currentDateTime.getDate()).padStart(2, '0');
        const hours = String(currentDateTime.getHours()).padStart(2, '0');
        const minutes = String(currentDateTime.getMinutes()).padStart(2, '0');
        const seconds = String(currentDateTime.getSeconds()).padStart(2, '0');

        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    };

    useEffect(() => {
        if(simulator.state === SIMULATOR_CONNECTION_STATE.inProgress) setIsStart(true);
        else setIsStart(false);
    }, [simulator.state]);

    const testStart = () => {
        //onGetTestStartToggle({id: simulator.id, start:true});
        //onReadDataStartToggle({id:simulator.id});
        /*interval.start();*/
        let seq = "1";
        if(simulator.test === SIMULATOR_TEST.standby) {
            seq = "1";
        } else if(simulator.test.charAt(0) == "1") {
            seq = "2";
        } else if(simulator.test.charAt(0) == "2") {
            seq = "3";
        } else if(simulator.test.charAt(0) == "3") {
            seq = "4";
        } else if(simulator.test.charAt(0) == "4") {
            seq = "5";
        } else if(simulator.test.charAt(0) == "5") {
            seq = "6";
        } else if(simulator.test.charAt(0) == "6") {
            seq = "1";
        }

        dispatch(setSimulControl(
            simulator.id,
            seq,
            parseInt(simulator.chargerTestMode) === 1 ? "2" : "1",
            chargingTime,
            loadValue,
            intervalTime,
            simulator.testInfo.testID,
            0,
            0,
            DONE_FLAG.notDone,
            localStorage.getItem('uuid')
        ));
    };

    useEffect(() => {
        if(maxMinValue.isFirst) {
            setMaxMinValue({
                maxVol: simulator.voltage,
                minVol: simulator.voltage,
                maxCur: simulator.current,
                minCur: simulator.current,
                isFirst: false
            });
        } else {
            if(maxMinValue.maxVol < simulator.voltage){
                setMaxMinValue({
                    ...maxMinValue,
                    maxVol: simulator.voltage
                });
            }
            if(maxMinValue.minVol > simulator.voltage) {
                setMaxMinValue({
                    ...maxMinValue,
                    minVol: simulator.voltage
                });
            }
            if(maxMinValue.maxCur < simulator.current){
                setMaxMinValue({
                    ...maxMinValue,
                    maxCur: simulator.current
                });
            }
            if(maxMinValue.minCur > simulator.current) {
                setMaxMinValue({
                    ...maxMinValue,
                    minCur: simulator.current
                });
            }
        }
        setVoltageMeter(simulator.voltage * 0.7);
        setCurrentMeter(simulator.current * 1.8);

    }, [simulator]);

    useEffect(() => {
        if(simulator.state === SIMULATOR_CONNECTION_STATE.connected) {
            dispatch(setTestReady(
                simulator.id,
                simulator.testInfo.deviceID,
                simulator.chargerId,
                simulator.testInfo.modelNo,
                simulator.testInfo.modelName,
                simulator.testInfo.serialNo,
                simulator.testInfo.technician,
                parseInt(simulator.chargerTestMode) === 1 ? 'N' : 'F',
                simulator.testInfo.note,
                localStorage.getItem('uuid')
            ));
        }
    }, []);

    useEffect(() => {
        if(stopConfirmOpen) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: "btn btn-success",
                    denyButton: "btn btn-error",
                    cancelButton: "btn btn-error"
                },
                buttonsStyling:true
            });
            swalWithBootstrapButtons.fire({
                title: "Restart?",
                text: t('simulator.confirmStop'),
                icon: "warning",
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: "Yes",
                denyButtonText: "No",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    swalWithBootstrapButtons.fire({
                        title: "Confirm!",
                        text: t('simulator.restartWithPerConfirm'),
                        icon: "success"
                    });
                    restartYes();
                } else if (result.isDenied) {
                    swalWithBootstrapButtons.fire({
                        title: "Confirm!",
                        text: t('simulator.restartConfirm'),
                        icon: "success"
                    });
                    restartNo();
                } else if (
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelled",
                        text: "Cancelled!",
                        icon: "error"
                    });
                    toggleStopConfirmOpen();
                }

                setStopConfirmOpen(false);
            });
        }
    }, [stopConfirmOpen]);

    const [showModal, setShowModal] = useState(false);

    const toggleModal = () => {
        setShowModal(!showModal);
    };

    const getReport = async (dataProps) => {
        try {
            const headers = getAxiosConfigWithAuthHeaders().headers;

            headers['Content-Type'] = 'application/json';

            const response = await fetch(`${API_REQUEST_URL}downloadExcel/testResultExcel`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(dataProps)
            });

            if (!response.ok) {
                throw new Error('Server responded with an error!');
            }

            const contentDisposition = response.headers.get('Content-Disposition');
            let fileName = 'download.xlsx';
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                if (fileNameMatch && fileNameMatch[1]) {
                    fileName = fileNameMatch[1].replace(/['"]/g, ''); // Remove any surrounding quotes
                }
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Download error:', error);
        }
    };

    const [passToDetail, setPassToDetail] = useState({
        testID: 0,
        simulatorName: '',
        testDate: '',
        serialNo: '',
        modelName: '',
        technician: '',
        result: [],
    });

    return simulator.state === SIMULATOR_CONNECTION_STATE.disconnected ? (
        <div className={"infoWrapper contents_wrap" }>
            <div className={"infoMsg"}>
                <div>
                    <FontAwesomeIcon icon="fa-solid fa-triangle-exclamation" size="10x" style={{color: "#ff0000",}} />
                    <p>{t('dashBoard.status.disconnectMsg')}</p>
                    <button className={"infoButton"} onClick={ () => {toggleModal()}}>{t('dashBoard.status.disconnectBtn')}</button>
                    <Modal show={showModal} onClose={ () => {toggleModal()}} status={0} simulator={simulator}/>
                </div>
            </div>
            {/*<AlertComp msg={t('alert.disConnMsg')} show={disConnAlert} temp={() => {disConnFalse()}} />*/}
        </div>
) : (simulator.state === SIMULATOR_CONNECTION_STATE.noInfo || simulator.chargerId === -1) ? (
            <div className={"infoWrapper contents_wrap" }>
                <div className={"infoMsg"}>
                    <div>
                        <FontAwesomeIcon icon="fa-solid fa-plug-circle-check" bounce size="10x" style={{color: "#7afc80",}}/>
                        <p>{t('dashBoard.status.noInfoMsg')}</p>
                        <button className={"infoButton"}  onClick={ () => {toggleModal()}}>{t('dashBoard.status.noInfoBtn')}</button>
                        <Modal show={showModal} onClose={toggleModal} status={1} simulator={simulator}/>
                    </div>
                </div>
            </div>
            ) : (simulator.test === SIMULATOR_TEST.done) ? (
                <TestResultComp
                    simulatorName={simulator.simulatorName}
                    testID={simulator.testInfo.testID}
                    flag={0}
                    handleOK={handleDoneOK}
                    handleRestart={handleDoneRestart}
                    getReport={getReport}
                />
            ) : (
        <div className="contents_wrap scrollbar_custom">
            <div className="simulator_wrap">
                <div className="simulator_title">
                    <h2>{charger.ModelName.content}</h2>
                </div>
                <div className="simulator_contents">
                    <div className="simulator_box_wrap_1">
                        {sequenceList.map((list, index) => (
                            <div className="simulator_box" key={index}>
                                <div className="simulator_box_title">
                                    {
                                        (index === 0 ? <p className={"titleMsg"}>{t('simulator.testSequence.normalOperation')}</p> :
                                            index === 1 ? <p className={"titleMsg"}>{t('simulator.testSequence.groundFault')}</p> :
                                                index === 2 ? <p className={"titleMsg"}>{t('simulator.testSequence.blockProtectiveConductor')}</p> :
                                                    index === 3 ? <p className={"titleMsg"}>{t('simulator.testSequence.ShortControlCircuit')}</p> :
                                                        index === 4 ? <p className={"titleMsg"}>{t('simulator.testSequence.diodeFault')}</p> :
                                                            index === 5 ? <p className={"titleMsg"}>{t('simulator.testSequence.CCID20')}</p> : '')
                                    }
                                    {
                                        index + 1 === Number(Array.from(simulator.test)[0])  && simulator.sequence === 9 ? <p className={"standByMsg"}>{t('simulator.preparing4Next')}</p> : ''
                                    }
                                </div>
                                <div className="simulator_box_con_1">
                                    {
                                        index === 0 ? <div className="simulator_box_con_title">{t('simulator.resistanceSetting')}</div> : <div className="simulator_box_con_title none"></div>
                                    }
                                    <ul className="simulator_resistance_point">
                                        <li className={(simulator.testResults[index*3 + 1] === RESULTS.processing ?
                                            "test_ing" : (simulator.testResults[index*3 + 1] === RESULTS.success ?
                                                "test_success" : (simulator.testResults[index*3 + 1] === RESULTS.fail ?
                                                    "test_fail" : "")))}
                                        >{(index >= 4 || parseInt(simulator.chargerTestMode) === 1 ? index === 4 ? "Short" : "" : "Low")}</li>
                                        {
                                            index === 4 ? (
                                                <li>
                                                </li>
                                            ) : (
                                                <li className={(simulator.testResults[index*3+2] === RESULTS.processing ?
                                                    "test_ing" : (simulator.testResults[index*3+2] === RESULTS.success ?
                                                        "test_success" : (simulator.testResults[index*3+2] === RESULTS.fail ?
                                                            "test_fail" : "")))}
                                                >{index === 4 ? '' : 'Normal'}
                                                </li>
                                            )
                                        }
                                        <li className={(simulator.testResults[index*3+3] === RESULTS.processing ?
                                            "test_ing" : (simulator.testResults[index*3+3] === RESULTS.success ?
                                                "test_success" : (simulator.testResults[index*3+3] === RESULTS.fail ?
                                                    "test_fail" : "")))}
                                        >{(index >= 4 || parseInt(simulator.chargerTestMode) === 1 ? index === 4 ? "Open" : "" : "High")}</li>
                                    </ul>
                                </div>
                                <div className="simulator_box_con_2">
                                    {
                                        index === 0 ? <div className="simulator_box_con_title">{t('simulator.testSequence.testSequence')}</div> : <div className="simulator_box_con_title none"></div>
                                    }
                                    <ul className="simulator_test_list">
                                        {list.map((sequence, i) => {
                                            let itemClassName = "simulator_test_";

                                            if (sequence.index === 0) itemClassName += "start";
                                            if (sequence.index === 1) {
                                                if (sequence.len === 2) {
                                                    itemClassName += "ing_2";
                                                } else {
                                                    itemClassName += "ing";
                                                }
                                            }
                                            if (sequence.index === 2) itemClassName += "end";

                                            if ((index + 1) === Number(Array.from(simulator.test)[0]) && i === simulator.sequence - 1) itemClassName += " testing";
                                            else if ((index + 1) < Number(Array.from(simulator.test)[0])) {
                                                itemClassName += " test_close";
                                            } else if((index + 1) === Number(Array.from(simulator.test)[0]) && i < simulator.sequence - 1) {
                                                itemClassName += " test_close";
                                            }

                                            return (
                                                <li className={itemClassName} key={i}>
                                                    <p style={{padding: '10px', fontWeight: 'bold'}}>{sequence.name}</p>
                                                </li>
                                            )
                                        })}
                                    </ul>
                                </div>
                                {
                                    ((allRTestResult[index] === RESULTS.fail ?
                                            (
                                                <div className={"simulator_box_footer test_fail"}>
                                                    {index === 0 ? <div className="simulator_box_con_title">{t('simulator.testResult')}</div> : <div className="simulator_box_con_title none"></div>}
                                                    <div className="simulator_box_con_result">{t('simulator.fail')}</div>
                                                </div>
                                            ) : allRTestResult[index] === RESULTS.success ? (
                                                    <div className={"simulator_box_footer test_success"}>
                                                        {index === 0 ? <div className="simulator_box_con_title">{t('simulator.testResult')}</div> : <div className="simulator_box_con_title none"></div>}
                                                        <div className="simulator_box_con_result">{t('simulator.success')}</div>
                                                    </div>
                                                ) : (index + 1 === Number(Array.from(simulator.test)[0])  && simulator.sequence === 9) ? (
                                                    <div className={"simulator_box_footer waiting"}>
                                                        <div className="simulator_box_con_result">Waiting</div>
                                                    </div>
                                                ) : (
                                                    <div className={"simulator_box_footer standby"}>
                                                        {index === 0 ? <div className="simulator_box_con_title">{t('simulator.testResult')}</div> : <div className="simulator_box_con_title none"></div>}
                                                        <div className="simulator_box_con_result">{t('simulator.standby')}</div>
                                                    </div>
                                                )
                                        )
                                    )
                                }
                            </div>
                        ))}
                    </div>
                    <div className="simulator_box_wrap_2">
                        <div className="simulator_set_wrap">
                            <div className="simulator_set_box">
                                <div className="simulator_set_box_title">{t('simulator.chargeTime')}</div>
                                <div className="simulator_set_box_body"><input className={"controlPanelInput"} defaultValue={chargingTime} onChange={(e) => {
                                    setChargingTime(e.target.value);
                                }} disabled={isStart}/> min</div>
                                <p className="simulator_set_box_text">* Set 10 Seconds when o</p>
                            </div>
                            <div className="simulator_set_box">
                                <div className="simulator_set_box_title">{t('simulator.intervalTime')}</div>
                                <div className="simulator_set_box_body"><input className={"controlPanelInput"} defaultValue={intervalTime} onChange={(e) => {
                                    setIntervalTime(e.target.value);
                                }} disabled={isStart}/> sec</div>
                            </div>
                            <div className="simulator_set_box">
                                <div className="simulator_set_box_title">{t('simulator.permanentResistance')}</div>
                                <div className="simulator_set_box_body"><input className={"controlPanelInput"} type = "number" step="0.1" defaultValue={loadValue} onChange={(e) => {
                                    setLoadValue(e.target.value);
                                }} disabled={isStart}/> kW</div>
                            </div>
                        </div>
                        <div className="simulator_glaph_wrap">
                            <div className="simulator_glaph_box">
                                <div className="simulator_guage_wrap">
                                    <div className="simulator_guage">
                                        <img className="img_gauge" src="style/img/simulator/img_gauge_v.png" alt="그래프"/>
                                            <img className="img_stick" src="style/img/simulator/img_stick.png" style={{ transform: `rotate(${voltageMeter}deg)`}} alt="그래프 막대"/>
                                    </div>
                                    <div className="simulator_text_box_con max">{(simulator.voltage).toFixed(1)}Volt</div>
                                </div>
                                <div className="simulator_graph">
                                    <div className="scrollbar_custom">
                                        <RealtimeGraph
                                            i ={i}
                                            handleElectricalValue={(info) => onUpdateSimulatorVoltage(info)}
                                            gettingData={simulator.gettingData} dataFlag={0}
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="simulator_glaph_wrap">
                            <div className="simulator_glaph_box">
                                <div className="simulator_guage_wrap">
                                    <div className="simulator_guage">
                                        <img className="img_gauge" src="style/img/simulator/img_gauge_a.png" alt="그래프"/>
                                        <img className="img_stick" src="style/img/simulator/img_stick.png" style={{ transform: `rotate(${currentMeter}deg)`}} alt="그래프 막대"/>
                                    </div>
                                    <div className="simulator_text_box_con max">{(simulator.current).toFixed(1)}Amp</div>
                                </div>
                                <div className="simulator_graph">
                                    <div className="scrollbar_custom">
                                        <RealtimeGraph
                                            i ={i}
                                            handleElectricalValue={(info) => onUpdateSimulatorCurrent(info)}
                                            gettingData={simulator.gettingData} dataFlag={1}
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="simulator_glaph_wrap">
                            <div className="simulator_glaph_box">
                                <div className="simulator_guage">
                                    <div className="simulator_text_box">
                                        <div className="simulator_text_box_title">{t('simulator.pwmMax')}</div>
                                        <div className="simulator_text_box_con max">{(simulator.pwmMax).toFixed(1)}Volt</div>
                                    </div>
                                    <div className="simulator_text_box">
                                        <div className="simulator_text_box_title">{t('simulator.pwmMin')}</div>
                                        <div className="simulator_text_box_con min">{(simulator.pwmMin).toFixed(1)}Volt</div>
                                    </div>
                                </div>
                                <div className="simulator_graph">
                                    <div className="scrollbar_custom">
                                        <RealtimeGraph
                                            i ={i}
                                            gettingData={simulator.gettingData} dataFlag={2}
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="simulator_box_wrap_3 mt_10">
                        STATUS: {simulator.eventDes}
                    </div>
                </div>
            </div>
            <div className="simulator_btn">
                <button type="button" className="btn btn_red" onClick={() => {
                    onStartButton();
                }}>{isStart ? t('simulator.stop') : t('simulator.start')}</button>
            </div>
            {/*<ConfirmStopComp msg={t('simulator.confirmStop')}
                             isOpen={stopConfirmOpen}
                             onCancel={() => {toggleStopConfirmOpen()}}
                             onYes={() => {restartYes()}}
                             onNo={() => {restartNo()}}
            />*/}
        </div>
        )

}

export default ControlPanelPage;

