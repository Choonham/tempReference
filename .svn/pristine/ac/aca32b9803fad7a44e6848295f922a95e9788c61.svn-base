import {useDispatch, useSelector} from "react-redux";
import { fas } from '@fortawesome/free-solid-svg-icons';
import { library } from '@fortawesome/fontawesome-svg-core';
import {useEffect, useState} from "react";
import {getAllTestResults, setTestResultPage} from "../state_modules/testResultState";
import {useTranslation} from "react-i18next";
import DatePickerComp from "../components/DatePickerComp";
import Modal from "../components/Modal";
import EventLogModal from "../components/EventLogModal";
import {RESULTS} from "../state_modules/simulatorInfoState";

const TestResultPage = () => {
    const currPage = useSelector(state => state.testResultState.currentPage);
    const testResults = useSelector(state => state.testResultState.filteredData);
    const totalPage = useSelector(state => state.testResultState.totalPage);

    const [t, i18n] = useTranslation('common');

    const dispatch = useDispatch();

    const getPageData = (t) => dispatch(getAllTestResults(t));
    const setCurrPage = (t) => dispatch(setTestResultPage(t));

    const [showModal, setShowModal] = useState(false);

    useEffect(() => {
        getPageData(currPage);
    }, [currPage]);

    library.add(fas);

    const toggleModal = () => {
        setShowModal(!showModal);
    };

    const getResultBtn = (result) => {
        if(result === -1) return (<div className={"failBtn"}>Fail</div>)
        if(result === 2)  return (<div className={"successBtn"}>Sussess</div>)
    }

    return (
        <div className="contents_wrap_2">
            <div className={"contents"}>
                <div className="contents_box">
                    <div className="table_search_wrap">
                        <div className="table_input_title">
                            <h4> {t('view.testResult')}</h4>
                        </div>
                        <div className="table_input_contents">
                            <div className="table_input ti_1_3">
                                <div className="table_input_th">{t('view.simulator')}</div>
                                <div className="table_input_td">
                                    <select className="form-select" title={t('view.selectSimulator')}>
                                        <option defaultValue="1">{t('view.all')}</option>
                                    </select>
                                </div>
                            </div>
                            <div className="table_input ti_1_3">
                                <div className="table_input_th">{t('view.simulatorNo')}</div>
                                <div className="table_input_td">
                                    <input type="text" className="form-control" placeholder={t('view.enterSimulatorNo')}
                                           title={t('view.enterSimulatorNo')}/>
                                </div>
                            </div>
                            <div className="table_input ti_1_3">
                                <div className="table_input_th">{t('view.chargerModel')}</div>
                                <div className="table_input_td">
                                    <select className="form-select" title={t('view.selectChargerModel')}>
                                        <option defaultValue="1">{t('view.all')}</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div className="table_input_contents">
                            <div className="table_input ti_1_3">
                                <div className="table_input_th">{t('view.chargerSN')}</div>
                                <div className="table_input_td">
                                    <input type="text" className="form-control" placeholder={t('view.enterChargerSN')}  title={t('view.enterChargerSN')}/>
                                </div>
                            </div>
                            <div className="table_input ti_2_3">
                                <div className="table_input_th">{t('view.testDate')}</div>
                                <div className="table_input_td table_input_datepicker">
                                    <DatePickerComp className="form-control datepicker" id="datepicker_input_1" title={t('view.startDate')}/>
                                        &nbsp;~&nbsp;
                                        <DatePickerComp className="form-control datepicker" id="datepicker_input_2" title={t('view.endDate')}/>
                                            <div className="dp_btn">
                                                <button type="button" className="btn btn_grey" title="1W">1W</button>
                                                <button type="button" className="btn btn_grey" title="1M">1M</button>
                                                <button type="button" className="btn btn_grey" title="3M">3M</button>
                                                <button type="button" className="btn btn_grey" title="6M">6M</button>
                                            </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="contents_btn">
                        <button type="button" className="btn btn_blue ml_auto" title={t('view.search')}>{t('view.search')}</button>
                    </div>
                    <div className="table_wrap">
                        <div className="table_responsive">
                            <table className="table table_bordered table_testResult">
                                <caption>{t('view.viewTestResult')}</caption>
                                <colgroup>
                                    <col width="4%"/>
                                    <col width="*"/>
                                    <col width="13%"/>
                                    <col width="9%"/>
                                    <col width="9%"/>
                                    <col width="9%"/>
                                    <col width="13%"/>
                                    <col width="13%"/>
                                </colgroup>
                                <thead>
                                <tr>
                                    <th scope="col" rowSpan="2" className="text-center">{t('view.no')}</th>
                                    <th scope="col" rowSpan="2" className="text-center">{t('view.simulator')}</th>
                                    <th scope="col" colSpan="4" className="text-center">{t('sideBar.testResult')}</th>
                                    <th scope="col" rowSpan="2" className="text-center">{t('view.testDateTime')}</th>
                                    <th scope="col" rowSpan="2" className="text-center">view</th>
                                </tr>
                                <tr>
                                    <th scope="col" className="text-center">Mode</th>
                                    <th scope="col" className="text-center">Low</th>
                                    <th scope="col" className="text-center">Normal</th>
                                    <th scope="col" className="text-center">High</th>
                                </tr>
                                </thead>
                                <tbody>
                                {
                                    testResults.length === 0 ?
                                        <tr>
                                            <td colSpan={8} className="text-center">{t("view.nothingToDisplay")}</td>
                                        </tr> :
                                        testResults.map((testResult) => {
                                            return (
                                                <>
                                                    <EventLogModal show={showModal} onClose={ () => {toggleModal()}} eventLogId={testResult.eventLogId} simulatorId={testResult.simulatorID} />
                                                    <tr>
                                                        <td rowSpan={4} className="text-center">{testResult.index}</td>
                                                        <td rowSpan={4}>{testResult.simulatorName}</td>
                                                        <td>{t("simulator.testSequence.normalOperation")}</td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[0] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[0])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[1] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[1])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[2] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[2])}
                                                            </span>
                                                        </td>
                                                        <td rowSpan={4}>{testResult.date}</td>
                                                        <td rowSpan="4" className="text-center">
                                                            <a href="javascript:;" className="table_a" title="Result">Result</a>
                                                            <a href="javascript:;" className="table_a" title="Report">Report</a>
                                                            <a href="javascript:;" className="table_a" title="event log" onClick={ () => {toggleModal()}}>event log</a>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>{t("simulator.testSequence.groundFault")}</td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[3] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[3])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[4] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[4])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[5] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[5])}
                                                            </span>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>{t("simulator.testSequence.blockProtectiveConductor")}</td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[6] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[6])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[7] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[7])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[8] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[8])}
                                                            </span>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>{t("simulator.testSequence.shortCircuit")}</td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[9] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[9])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[10] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[10])}
                                                            </span>
                                                        </td>
                                                        <td className="text-center">
                                                            <span className={testResult.sequenceResults[11] === RESULTS.fail ? "text_red" : "text_Success"}>
                                                                {getResultBtn(testResult.sequenceResults[11])}
                                                            </span>
                                                        </td>
                                                    </tr>
                                                </>
                                            )
                                        })
                                }   
                                </tbody>
                            </table>
                        </div>
                        {
                            totalPage === 0 ?
                                (<div className="pagination_wrap"></div>) :
                                (<div className="pagination_wrap">
                                    <ul className="pagination">
                                        <li className="disabled">
                                            <a href="#" className="prev" aria-label="Previous">
                                                <span><img src="style/img/sub/img_prev_arrow.png" alt={t("view.previous")}/></span>
                                            </a>
                                        </li>
                                        {Array.from({ length: totalPage }, (_, index) => (
                                            <li className={`${index === currPage ? 'on' : ''}`}>
                                                <a
                                                    href="#"
                                                    key={index}
                                                    onClick={() => setCurrPage(index)}
                                                >
                                                    {index + 1}
                                                </a>
                                            </li>
                                        ))}
                                        <li>
                                            <a href="#" className="next" aria-label="Next">
                                                <span><img src="style/img/sub/img_next_arrow.png" alt={t("view.next")}/></span>
                                            </a>
                                        </li>
                                    </ul>
                                </div>)
                        }
                    </div>
                </div>
            </div>
        </div>
        /*<div className={"pageWrapper"}>
            <div className="searchFieldWrapper">
                <div className="selectBoxWrapper">
                    <div className="firstRow">
                        <label htmlFor="select1">시뮬레이터</label>
                        <select id="select1">
                            <option>전체</option>
                        </select>
                        <label htmlFor="select2">시뮬레이터 번호</label>
                        <input type="text" id="text"/>
                        <label htmlFor="select3">충전기 모델</label>
                        <select id="select3">
                            <option>전체</option>
                        </select>
                    </div>
                    <div className="secondRow">
                        <label htmlFor="text1">충전기 S/N</label>
                        <input type="text" id="text1"/>
                        <label htmlFor="startDate">시험일 </label>
                        <input type="date" id="startDate"/>
                        <label htmlFor="endDate"> ~ </label>
                        <input type="date" id="endDate"/>
                    </div>
                </div>
                <div className="searchButtonWrapper">
                    <button>Search</button>
                </div>
            </div>
            <div className={"eventLogTableWrapper"}>
                <table className="blue-table">
                    <thead>
                    <tr>
                        <th className={"x-sm"} rowSpan={2}>번호</th>
                        <th className={"sm"}  rowSpan={2}>시험 장비</th>
                        <th className={"large"} colSpan={4}>시험결과</th>
                        <th className={"sm"} rowSpan={2}>시험일시</th>
                        <th className={"md"} rowSpan={2}>확인</th>
                    </tr>
                    <tr>
                        <th className={"sm"}>모드</th>
                        <th className={"sm"} >Low</th>
                        <th className={"sm"}>Normal</th>
                        <th className={"sm"}>High</th>
                    </tr>
                    </thead>
                    <tbody>
                    {
                        testResults.length === 0 ?
                            <tr>
                                <td colSpan={8}>표시할 데이터가 없습니다.</td>
                            </tr> :
                            testResults.map((testResult) => {
                                return (
                                    <>
                                        <tr>
                                            <td rowSpan={4}>{testResult.index}</td>
                                            <td rowSpan={4}>{testResult.simulatorName}</td>
                                            <td>정상동작</td>
                                            <td>{getResultBtn(testResult.sequenceResults[0])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[1])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[2])}</td>
                                            <td rowSpan={4}>{testResult.date}</td>
                                            <td rowSpan={4}></td>
                                        </tr>
                                        <tr>
                                            <td>접지고장</td>
                                            <td>{getResultBtn(testResult.sequenceResults[3])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[4])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[5])}</td>
                                        </tr>
                                        <tr>
                                            <td>보호도체차단</td>
                                            <td>{getResultBtn(testResult.sequenceResults[6])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[7])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[8])}</td>
                                        </tr>
                                        <tr>
                                            <td>제어회로단락</td>
                                            <td>{getResultBtn(testResult.sequenceResults[9])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[10])}</td>
                                            <td>{getResultBtn(testResult.sequenceResults[11])}</td>
                                        </tr>
                                    </>
                                )
                            })
                    }
                    </tbody>
                </table>
                {
                    totalPage === 0 ?
                        (<div className="pagination"></div>) :
                        (<div className="pagination">
                            <a href="#" className="page-link"><FontAwesomeIcon icon="fa-solid fa-caret-left" style={{color: "#619bff",}} /> </a>
                            {Array.from({ length: totalPage }, (_, index) => (
                                <a
                                    href="#"
                                    key={index}
                                    className={`page-link${index === currPage ? ' active' : ''}`}
                                    onClick={() => setCurrPage(index)}
                                >
                                    {index + 1}
                                </a>
                            ))}
                            <a href="#" className="page-link"> <FontAwesomeIcon icon="fa-solid fa-caret-right" style={{color: "#619bff",}} /></a>
                        </div>)
                }
            </div>
        </div>*/
    )
}

export default TestResultPage;